#!/bin/bash

# Create the folder
mkdir -p /home/ec2-user/s3-var-log-script

# File that stores the S3 bucket path and cron schedule
S3_BUCKET_FILE="/home/ec2-user/s3-var-log-script/s3-bucket-path.txt"
CRON_SCHEDULE_FILE="/home/ec2-user/s3-var-log-script/s3-cron-schedule.txt"

# Check if the S3 bucket path is already stored
if [ ! -f "$S3_BUCKET_FILE" ]; then
  # If no file exists, prompt the user to enter the S3 bucket path
  read -p "Enter the S3 bucket path (e.g., s3://bucket-name/path/): " S3_BUCKET_PATH
  
  # Save the S3 bucket path to the file for future use
  echo "$S3_BUCKET_PATH" > "$S3_BUCKET_FILE"
  echo "S3 bucket path saved for future use."
else
  # If the file exists, read the S3 bucket path from the file
  S3_BUCKET_PATH=$(cat "$S3_BUCKET_FILE")
  echo "Using saved S3 bucket path: $S3_BUCKET_PATH"
fi

# Check if cron schedule already exists
if [ ! -f "$CRON_SCHEDULE_FILE" ]; then
  # Always ask for cron schedule to trigger prompt
  read -p "Enter the time to schedule the cron job (in 24-hour format, e.g., 2:00 for 2 AM): " CRON_TIME

  # Validate and format the CRON_TIME to "0 2" (for example, for 2:00 AM)
  if [[ "$CRON_TIME" =~ ^([0-9]{1,2}):([0-9]{2})$ ]]; then
    # Extract hour and minute
    HOUR=$(echo $CRON_TIME | cut -d: -f1)
    MINUTE=$(echo $CRON_TIME | cut -d: -f2)

    # Check if the hour and minute are valid
    if [ "$HOUR" -ge 0 ] && [ "$HOUR" -le 23 ] && [ "$MINUTE" -ge 0 ] && [ "$MINUTE" -le 59 ]; then
      CRON_SCHEDULE="$MINUTE $HOUR * * *"
      echo "$CRON_SCHEDULE" > "$CRON_SCHEDULE_FILE"
      echo "Cron job schedule saved for future use."
    else
      echo "Invalid time format. Hour should be between 0-23 and minute between 0-59."
      exit 1
    fi
  else
    echo "Invalid time format. Please use HH:MM format (e.g., 2:00)."
    exit 1
  fi
else
  # If cron schedule already exists, read it from the file
  CRON_SCHEDULE=$(cat "$CRON_SCHEDULE_FILE")
  echo "Using saved cron schedule: $CRON_SCHEDULE"
fi

# Get today's date in YYYY-MM-DD format
DATE=$(date +%F)

# Create the S3 path for today
DEST_PATH="${S3_BUCKET_PATH}SYSLOG/$DATE/"

# Ensure the directory exists (optional, for clarity)
mkdir -p /ec2-user/log

# Find logs that have been modified today in /var/log/ and copy them to the temporary directory
find /var/log/ -type f -newermt $(date +%F) -exec cp {} /ec2-user/log \;

# Upload the logs to S3 (recursively if there are subdirectories or many files)
aws s3 cp /ec2-user/log $DEST_PATH --recursive

# Clean up the temporary directory
rm -rf /ec2-user/log

# Check if the last command was successful
if [ $? -eq 0 ]; then
  echo "Log files successfully uploaded to $DEST_PATH"

  # Cron job entry using the formatted cron schedule
  CRON_JOB="$CRON_SCHEDULE /home/ec2-user/s3-var-log.sh"

  # Remove any potential whitespace from the cron job line to avoid issues
  CRON_JOB=$(echo "$CRON_JOB" | tr -s ' ')

  # Check if the cron job is already in crontab
  if ! crontab -l 2>/dev/null | grep -qF "$CRON_JOB"; then
    # If the cron job isn't already added, add it
    (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
    echo "Cron job added to crontab to run at $CRON_SCHEDULE daily."
  else
    echo "Cron job already exists in crontab, skipping addition."
  fi
else
  echo "There was an error uploading the logs. Cron job not added."
fi
